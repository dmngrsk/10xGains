---
description:
globs:
alwaysApply: true
---
# AI Rules for 10xGains

## Tech stack

- Angular 19
- Tailwind CSS 4
- Angular Material Design 3
- Supabase

## Project Structure

When introducing changes to the project, think in **features** when organizing files. Each feature resides in `./src/app/features/` in its dedicated feature folder.

Each feature should contain a `routes.ts` file with a routing config.
```ts
export const MY_FEATURE_ROUTES: Route[] = [
  {
    path: '',
    pathMatch: 'full',
    component: MyFeatureComponent,
    canActivate: [ /* ... */ ]
  }
];
```

Such configs will be imported in `./src/app/app.routes.ts` with the following syntax for lazy loading:
```ts
{
  path: 'my-feature',
  loadChildren: () => import('./my-feature/my-feature.routes').then(m => m.MY_FEATURE_ROUTES),
  canActivate: [ /* ... */ ]
},
```

Additionally, each feature folder will include a `shared/` directory for storing mutual files and a `service/` directory for services that connect to the backend, together with their associated contract models.

For everything else in a given feature folder, use the standard Angular guidelines and all other other rules provided to you.

## Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.

## Unit testing

- Leverage the `vi` object for test doubles - Use `vi.fn()` for function mocks, `vi.spyOn()` to monitor existing functions, and `vi.stubGlobal()` for global mocks. Prefer spies over mocks when you only need to verify interactions without changing behavior.
- Master `vi.mock()` factory patterns - Place mock factory functions at the top level of your test file, return typed mock implementations, and use `mockImplementation()` or `mockReturnValue()` for dynamic control during tests. Remember the factory runs before imports are processed.
- Use inline snapshots for readable assertions - Replace complex equality checks with `expect(value).toMatchInlineSnapshot()` to capture expected output directly in your test file, making changes more visible in code reviews.
- Make watch mode part of your workflow - Run `vitest --watch` during development for instant feedback as you modify code, filtering tests with `-t` to focus on specific areas under development.
- Explore UI mode for complex test suites - Use `vitest --ui` to visually navigate large test suites, inspect test results, and debug failures more efficiently during development.
- Handle optional dependencies with smart mocking - Use conditional mocking to test code with optional dependencies by implementing `vi.mock()` with the factory pattern for modules that might not be available in all environments.
- Structure tests for maintainability - Group related tests with descriptive `describe` blocks, use explicit assertion messages, and follow the Arrange-Act-Assert pattern to make tests self-documenting.
- Leverage TypeScript type checking in tests - Enable strict typing in your tests to catch type errors early, use `expectTypeOf()` for type-level assertions, and ensure mocks preserve the original type signatures.

## Additional notes

- Use `yarn` instead of `npm` for all package-related commands.
- When not sure about a solution to a problem, just ask me for feedback! Do not make anything up.
