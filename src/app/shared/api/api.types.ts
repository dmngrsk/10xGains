/**
 * !!! IMPORTANT: AUTO-GENERATED FILE !!!
 *
 * This file is automatically generated from undefined
 * Do not edit this file directly. Make changes to the source file instead.
 *
 * NOTE: This type copying approach is not meant to be a final solution.
 * A more robust approach would involve generating types from a common schema
 * or using a dedicated code generation tool.
 *
 * Recommended improvement: Create a shared npm package containing all type
 * definitions that can be imported by both Angular and Deno environments.
 * This would ensure type consistency and eliminate manual syncing.
 *
 * Last updated: 2025-05-16T23:01:56.333Z
 */

/*
  DTO and Command Model Definitions for API
  Based on database models from supabase/functions/shared/models/database-types.ts and API plan (api-plan.md)

  Each interface directly or indirectly corresponds to a database table:
  - User Profiles           -> Tables<"public", "user_profiles">
  - Training Plans          -> Tables<"public", "training_plans">
  - Training Plan Days      -> Tables<"public", "training_plan_days">
  - Exercises               -> Tables<"public", "exercises">
  - Training Plan Exercises -> Tables<"public", "training_plan_exercises">
  - Training Plan Exercise Sets -> Tables<"public", "training_plan_exercise_sets">
  - Training Plan Exercise Progressions -> Tables<"public", "training_plan_exercise_progressions">
  - Training Sessions       -> Tables<"public", "training_sessions">
  - Session Sets            -> Tables<"public", "session_sets">

  The command models represent the payloads for create/update operations as per API plan.

  Note: Additional properties such as timestamps (created_at, updated_at) are included in DTOs when available.
*/

import type { Database } from '../db/database.types';

// 1. User Profile DTO and Command
export type UserProfileDto = Database["public"]["Tables"]["user_profiles"]["Row"];

export type UpdateUserProfileCommand = Partial<Pick<UserProfileDto, "first_name" | "active_training_plan_id">>;

// 2. Training Plan DTO and Commands
export type TrainingPlanDto = Database["public"]["Tables"]["training_plans"]["Row"] & {
  days?: TrainingPlanDayDto[]; // nested training plan days
};

export type CreateTrainingPlanCommand = Pick<Database["public"]["Tables"]["training_plans"]["Insert"], "name" | "description">;

export type UpdateTrainingPlanCommand = Pick<Database["public"]["Tables"]["training_plans"]["Update"], "name" | "description">;

// Command for POST /training-plans/{planId}/suggest
export interface AiSuggestTrainingPlanQueryCommand {
  query: string;
}

// DTOs for AI-suggested training plan (POST /training-plans/{planId}/suggest response)
// These types extend base DTOs with an optional 'is_ai_modified' flag
export interface AiSuggestedTrainingPlanResponseDto {
  ai_message: string;
  ai_plan_modified: boolean;
  suggested_training_plan?: AiSuggestedTrainingPlanDto; // Can be null if AI only answers a question
}

export type AiSuggestedTrainingPlanDto = Omit<TrainingPlanDto, 'days'> & {
  days?: AiSuggestedTrainingPlanDayDto[];
  is_ai_modified?: boolean;
};

export type AiSuggestedTrainingPlanDayDto = Omit<TrainingPlanDayDto, 'exercises'> & {
  exercises?: AiSuggestedTrainingPlanExerciseDto[];
  is_ai_modified?: boolean;
};

export type AiSuggestedTrainingPlanExerciseDto = Omit<TrainingPlanExerciseDto, 'sets'> & {
  sets?: AiSuggestedTrainingPlanExerciseSetDto[];
  is_ai_modified?: boolean;
};

export type AiSuggestedTrainingPlanExerciseSetDto = TrainingPlanExerciseSetDto & {
  is_ai_modified?: boolean;
};

// Command and constituent data types for POST /training-plans/{planId}/composite
// For composite updates, 'id' is optional for new items.
// Days, exercises, sets not included in payload but existing in DB will be DELETED.
// Order is determined by array position.
export type CompositeTrainingPlanUpdateCommand =
  Pick<Database["public"]["Tables"]["training_plans"]["Update"], "name" | "description">
  & { id?: string; days: CompositeTrainingPlanDayData[]; }; // id of the training plan is via URL parameter {planId}

export type CompositeTrainingPlanDayData =
  Pick<Database["public"]["Tables"]["training_plan_days"]["Insert"], "name" | "description">
  & { id?: string; exercises?: CompositeTrainingPlanExerciseData[]; }; // id is optional for new, present for existing

export type CompositeTrainingPlanExerciseData =
  Pick<Database["public"]["Tables"]["training_plan_exercises"]["Insert"], "exercise_id">
  & { id?: string; sets?: CompositeTrainingPlanExerciseSetData[]; }; // id is optional for new, present for existing

export type CompositeTrainingPlanExerciseSetData =
  Pick<Database["public"]["Tables"]["training_plan_exercise_sets"]["Insert"], "expected_reps" | "expected_weight">
  & { id?: string; }; // id is optional for new, present for existing

// Response DTO for POST /training-plans/{planId}/activate
export interface ActivateTrainingPlanResponseDto {
  active_training_plan_id: string; // The ID of the plan that was activated
}

// 3. Training Plan Day DTO and Commands
export type TrainingPlanDayDto = Database["public"]["Tables"]["training_plan_days"]["Row"] & {
  exercises?: TrainingPlanExerciseDto[]; // nested exercises
};

// For creation, omit fields that come from URL (training_plan_id) or are auto-generated (id). order_index is optional.
export type CreateTrainingPlanDayCommand = Pick<Database["public"]["Tables"]["training_plan_days"]["Insert"], "name" | "description"> & { order_index?: number; };

export type UpdateTrainingPlanDayCommand = Pick<Database["public"]["Tables"]["training_plan_days"]["Update"], "name" | "description" | "order_index">;

// Reorder command is covered by UpdateTrainingPlanDayCommand by sending only order_index.

// 4. Exercise DTO and Commands (Global Resource)
export type ExerciseDto = Database["public"]["Tables"]["exercises"]["Row"];

export type CreateExerciseCommand = Pick<Database["public"]["Tables"]["exercises"]["Insert"], "name" | "description">;

export type UpdateExerciseCommand = Pick<Database["public"]["Tables"]["exercises"]["Update"], "name" | "description">;

// 5. Training Plan Exercise DTO and Commands
export type TrainingPlanExerciseDto = Database["public"]["Tables"]["training_plan_exercises"]["Row"] & {
  sets?: TrainingPlanExerciseSetDto[]; // nested sets
};

// For creation, omit fields from URL (training_plan_day_id) or auto-generated (id). order_index is optional.
export type CreateTrainingPlanExerciseCommand = Pick<Database["public"]["Tables"]["training_plan_exercises"]["Insert"], "exercise_id"> & { order_index?: number; };

// For updating, only order_index is typically changed directly for this linking entity.
export type UpdateTrainingPlanExerciseCommand = Pick<Database["public"]["Tables"]["training_plan_exercises"]["Update"], "order_index">;

// Reorder command is covered by UpdateTrainingPlanExerciseCommand.

// 6. Training Plan Exercise Set DTO and Commands
export type TrainingPlanExerciseSetDto = Database["public"]["Tables"]["training_plan_exercise_sets"]["Row"];

// For creation, omit fields from URL (training_plan_exercise_id) or auto-generated (id). set_index is optional.
export type CreateTrainingPlanExerciseSetCommand = Pick<Database["public"]["Tables"]["training_plan_exercise_sets"]["Insert"], "expected_reps" | "expected_weight"> & { set_index?: number; };

export type UpdateTrainingPlanExerciseSetCommand = Pick<Database["public"]["Tables"]["training_plan_exercise_sets"]["Update"], "set_index" | "expected_reps" | "expected_weight">;

// 7. Training Plan Exercise Progression DTO and Command
export type TrainingPlanExerciseProgressionDto = Database["public"]["Tables"]["training_plan_exercise_progressions"]["Row"];

// Command to update (or create if not exists) progression rules. Fields like consecutive_failures might be updated by system or user.
export type UpsertTrainingPlanExerciseProgressionCommand = Pick<Database["public"]["Tables"]["training_plan_exercise_progressions"]["Update"], "weight_increment" | "failure_count_for_deload" | "deload_percentage" | "deload_strategy" | "consecutive_failures" | "reference_set_index">;

// 8. Training Session DTO and Commands
export type TrainingSessionDto = Database["public"]["Tables"]["training_sessions"]["Row"] & {
  sets?: SessionSetDto[]; // nested sets
};

export type CreateTrainingSessionCommand = Pick<Database["public"]["Tables"]["training_sessions"]["Insert"], "training_plan_id" | "training_plan_day_id">;

export type UpdateTrainingSessionCommand = Pick<Database["public"]["Tables"]["training_sessions"]["Update"], "status">;

// For PATCH /training-sessions/{sessionId}/complete
// Request body is empty.
export type CompleteTrainingSessionCommand = Record<string, never>; // Represents an empty request body

// 9. Session Set DTO and Commands
export type SessionSetDto = Database["public"]["Tables"]["session_sets"]["Row"];

export type CreateSessionSetCommand = Pick<Database["public"]["Tables"]["session_sets"]["Insert"], "training_session_id" | "training_plan_exercise_id" | "set_index" | "actual_weight" | "actual_reps"  | "status" | "completed_at">;

export type UpdateSessionSetCommand = Partial<Pick<Database["public"]["Tables"]["session_sets"]["Update"], "set_index" | "actual_reps" | "actual_weight" | "status" | "completed_at">>;

// For PATCH /training-sessions/{sessionId}/sets/{setId}/complete
// Request body is empty.
export type CompleteSessionSetCommand = Record<string, never>; // Represents an empty request body

// For PATCH /training-sessions/{sessionId}/sets/{setId}/failed
// Request uses query parameter `reps`, body is empty.
export type FailSessionSetCommand = Pick<SessionSetDto, "actual_reps">;
